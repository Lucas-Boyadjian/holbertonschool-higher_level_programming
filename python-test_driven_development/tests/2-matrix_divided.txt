# Test for the matrix_divided function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal division with integers
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test that original matrix doesn't change
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test division by negative number
>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

# Test division by float
>>> matrix_divided(matrix, 2.5)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test matrix with float values
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

# Test with non-list matrix
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with matrix containing non-numeric values
>>> matrix_divided([[1, "2", 3], [4, 5, 6]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with rows of different sizes
>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Test with non-number divisor
>>> matrix_divided(matrix, "2")
Traceback (most recent call last):
TypeError: div must be a number

# Test division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# Test with list containing empty lists
>>> matrix_divided([[], []], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with matrix containing a single empty row
>>> matrix_divided([[]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
