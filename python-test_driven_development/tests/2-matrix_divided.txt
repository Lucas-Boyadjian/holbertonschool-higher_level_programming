The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
-----------------------

Import function from module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic matrix division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test that original matrix is unchanged:
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Test division by negative number:
    >>> matrix_divided(matrix, -2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

Test division by float:
    >>> matrix_divided(matrix, 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

Test with matrix containing empty rows of the same size:
    >>> matrix_divided([[], []], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test with empty matrix:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test with non-list matrix:
    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test with matrix containing non-numeric values:
    >>> matrix_divided([[1, "string", 3], [4, 5, 6]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test with uneven row sizes:
    >>> matrix_divided([[1, 2, 3], [4, 5]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Test with non-number divisor:
    >>> matrix_divided(matrix, "2")
    Traceback (most recent call last):
    TypeError: div must be a number

Test with None as divisor:
    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
    TypeError: div must be a number

Test division by zero:
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
